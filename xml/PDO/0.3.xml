<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE package SYSTEM "http://pear.php.net/dtd/package-1.0">
<package version="1.0">
  <name>PDO</name>
  <summary>PHP Data Objects Interface</summary>
  <description>PDO provides a uniform data access interface, sporting advanced features such
as prepared statements and bound parameters.  PDO drivers are dynamically
loadable and may be developed independently from the core, but still accessed
using the same API.
Read the documentation at http://www.php.net/pdo for more information.</description>
  <maintainers>
    <maintainer>
      <user>wez</user>
      <name>Wez Furlong</name>
      <email>wez@php.net</email>
      <role>lead</role>
    </maintainer>
    <maintainer>
      <user>helly</user>
      <name>Marcus Boerger</name>
      <email>helly@php.net</email>
      <role>lead</role>
    </maintainer>
    <maintainer>
      <user>iliaa</user>
      <name>Ilia Alshanetsky</name>
      <email>iliaa@php.net</email>
      <role>lead</role>
    </maintainer>
    <maintainer>
      <user>gschlossnagle</user>
      <name>George Schlossnagle</name>
      <email>george@omniti.com</email>
      <role>lead</role>
    </maintainer>
  </maintainers>
  <release>
    <version>0.3</version>
    <date>2005-03-09</date>
    <license>PHP</license>
    <state>beta</state>
    <notes>You need to install a PDO database driver to make use of PDO,
check http://pecl.php.net/package-search.php?pkg_name=PDO
for a list of available PDO drivers.

It is highly recommended that you update to the latest stable PHP 5 snapshot
before using PDO.
You can obtain it from http://snaps.php.net.

If you are running on Windows, you should download:
http://snaps.php.net/win32/php5.0-win32-latest.zip
http://snaps.php.net/win32/PECL_5_0/php_pdo.dll

You can find additional PDO drivers at:
http://snaps.php.net/win32/PECL_5_0/

- New fetch modes:
  PDO_FETCH_FUNC, PDO_FETCH_GROUP, PDO_FETCH_UNIQUE, PDO_FETCH_CLASSTYPE
- New fetch mode for PHP 5.1 and higher: PDO_FETCH_SERIALIZE
- Changed signature for PDO::lastInsertId(); it is now:
    string PDO::lastInsertId([string name])
  this allows arbitrary unique identifiers to be returned, and allows for 
  better support for RDBMS with sequences.
- Improved bound parameter emulation when using non-string types.
- PDOStatement implements SPL Traversable interface when SPL is present.

- Added PDO::quote($string).  Closes PECL Bug #3393
- Fixed PDO::query() for drivers using bound parameter emulation.
- Fixed PECL Bug #3434, crash when using odbc with named parameters.
- Added PDOStatement::fetchObject(string class_name [, NULL|array ctor_args]])
- PDO_FETCH_CLASS now passes args through to the class constructor
- Now builds directly via &quot;pear install PDO&quot; (upgrade to PEAR 1.3.5 first)

** Note **

You should uninstall and re-install your individual database drivers whenever
you upgrade the base PDO package, otherwise you will see an error about PDO API
numbers when you run your PHP scripts.</notes>
    <deps>
      <dep type="php" rel="ge" version="5.0.3"/>
    </deps>
    <filelist>
      <file role="src" name="config.m4"/>
      <file role="src" name="config.w32"/>
      <file role="src" name="pdo.c"/>
      <file role="src" name="pdo_dbh.c"/>
      <file role="src" name="pdo_stmt.c"/>
      <file role="src" name="php_pdo.h"/>
      <file role="src" name="php_pdo_driver.h"/>
      <file role="src" name="php_pdo_int.h"/>
      <file role="src" name="pdo_sql_parser.re"/>
      <file role="src" name="pdo_sql_parser.c"/>
      <file role="src" name="pdo_sqlstate.c"/>
      <file role="src" name="Makefile.frag"/>
      <file role="doc" name="README"/>
      <file role="doc" name="TODO"/>
      <file role="doc" name="pdo.php"/>
      <file role="doc" name="CREDITS"/>
    </filelist>
  </release>
</package>
